name: CD

on:
  push:
    branches:
      - feature/*
    # 下記に変更があった場合のみ実行
    paths:
      - 'product.php'
      - '.github/workflows/test.yml'
      - '.github/scripts/test01.sh'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac

      # 親ブランチ（main）の最新をフェッチ
      - name: Fetch main branch
        run: git fetch origin

      # 差分の取得
      - name: Get diff with main branch and extract line numbers
        run: |
          # ワークフローを起動したブランチを取得
          branch_name=${{ github.ref }}
          
          # refs/heads/ を削除してブランチ名のみ取得
          branch_name=${branch_name#refs/heads/}

          echo "Branch name: $branch_name"

          # 差分を取得（mainとワークフローを起動したブランチの比較）
          git diff --unified=0 origin/main..origin/$branch_name > diff_output.txt
          
          # 変更ファイルリストの作成
          touch changed_files.txt
                    
          # diff と @@ の行を解析
          while IFS= read -r line; do
            # diff --git 行からファイル名を抽出
            if [[ "$line" =~ ^diff\ --git ]]; then
              # ファイル名を抽出
              file_name=$(echo "$line" | sed -E 's/^diff --git a\/(.*) b\/.*$/\1/')
            fi
        
            # '@@' 行からファイル名と新しい行番号（+以降の部分）を抽出
            if [[ "$line" =~ ^@@ ]]; then
              # ファイル名と行番号の取得
              # 例えば、'@@ -46,0 +48 @@' から '48' を取り出す
              # 追加された行番号を取り出す（カンマ区切りも対応）
              added_lines=$(echo "$line" | sed -E 's/.*\+([0-9]+),([0-9]+).*/\1,\2/;s/.*\+([0-9]+).*/\1/')
              
              # 行番号がカンマ区切り（複数行）の場合、行番号を分割して1行ずつ表示
              if [[ "$added_lines" =~ , ]]; then
                # カンマで区切られた行番号を分割
                start_line=$(echo "$added_lines" | cut -d',' -f1)
                count_line=$(echo "$added_lines" | cut -d',' -f2)
                # 追加行の番号を連番で表示
                for ((i=0; i<count_line; i++)); do
                  echo -e "$file_name:$((start_line + i))" >> changed_files.txt
                done
              else
                # 単一の行番号の場合
                echo -e "$file_name:$added_lines" >> changed_files.txt
              fi
            fi
          done < diff_output.txt
                    
          # 変更ファイルが存在する場合は、環境変数に設定
          if [ -s changed_files.txt ]; then
            echo "changed_files=$(cat changed_files.txt | tr '\n' ' ')" >> $GITHUB_ENV
          else
            echo "changed_files=" >> $GITHUB_ENV
          fi

      # 変更されたファイルを表示（デバッグ用）
      - name: Display modified files
        run: |
          echo "Modified files:"
          echo "${{ env.changed_files }}"

      # PHP をセットアップ
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2' # 必要なPHPバージョンを指定
          extensions: mbstring

      # シェルスクリプトの実行
      - name: Install PHP CodeSniffer and execute
        run: |
          chmod u+x .github/scripts/test01.sh
          .github/scripts/test01.sh "./product.php"

      # 変更されたファイルに対して PHP_CodeSniffer を実行
      - name: Run PHP CodeSniffer on specific lines
        if: env.changed_files != ''
        run: |
          # 変更ファイルおよび行を変数に入れる
          changed_files="${{ env.changed_files }}"

          # エラーフラグ
          failed=false
          
          # phpcsのインストール
          composer global require "squizlabs/php_codesniffer=*"
          
          chmod u+x .github/scripts/test01.sh

          # 変更行ごとにループ
          for line in $changed_files; do
            # ファイル名と行番号を分割
            file=$(echo "$line" | cut -d':' -f1)
            line_num=$(echo "$line" | cut -d':' -f2)
          
            .github/scripts/test01.sh $file
          
            if grep -q "^[ ]\{1,2\}$line_num |" tmp.txt; then
              echo "Error detected on line $line_num in file $file"
              echo "$file:$line_num" >> a.txt
              grep "^[ ]\{1,2\}$line_num |" tmp.txt >> a.txt
              failed=true
            fi
          done
          
          # エラーが発生していた場合、ジョブを失敗として終了
          if [ "$failed" = true ]; then
            echo "PHP CodeSniffer found issues on modified lines."
            cat a.txt
            # ワークフローをエラーとして終了
            exit 1
          else
            echo "No issues found in modified lines."
          fi